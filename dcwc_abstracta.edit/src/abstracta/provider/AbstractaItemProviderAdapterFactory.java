/**
 */
package abstracta.provider;

import abstracta.util.AbstractaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AbstractaItemProviderAdapterFactory extends AbstractaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ModelFactoryAbstractaWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryAbstractaWcItemProvider modelFactoryAbstractaWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ModelFactoryAbstractaWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryAbstractaWcAdapter() {
		if (modelFactoryAbstractaWcItemProvider == null) {
			modelFactoryAbstractaWcItemProvider = new ModelFactoryAbstractaWcItemProvider(this);
		}

		return modelFactoryAbstractaWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ProjectWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectWcItemProvider projectWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ProjectWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectWcAdapter() {
		if (projectWcItemProvider == null) {
			projectWcItemProvider = new ProjectWcItemProvider(this);
		}

		return projectWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.PackageWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageWcItemProvider packageWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.PackageWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageWcAdapter() {
		if (packageWcItemProvider == null) {
			packageWcItemProvider = new PackageWcItemProvider(this);
		}

		return packageWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.DataTypeFactoryWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeFactoryWcItemProvider dataTypeFactoryWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.DataTypeFactoryWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeFactoryWcAdapter() {
		if (dataTypeFactoryWcItemProvider == null) {
			dataTypeFactoryWcItemProvider = new DataTypeFactoryWcItemProvider(this);
		}

		return dataTypeFactoryWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TypeWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeWcItemProvider typeWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TypeWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeWcAdapter() {
		if (typeWcItemProvider == null) {
			typeWcItemProvider = new TypeWcItemProvider(this);
		}

		return typeWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.ClassWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassWcItemProvider classWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.ClassWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassWcAdapter() {
		if (classWcItemProvider == null) {
			classWcItemProvider = new ClassWcItemProvider(this);
		}

		return classWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.Composition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionItemProvider compositionItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.Composition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionAdapter() {
		if (compositionItemProvider == null) {
			compositionItemProvider = new CompositionItemProvider(this);
		}

		return compositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.Generalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationItemProvider generalizationItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.Generalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdapter() {
		if (generalizationItemProvider == null) {
			generalizationItemProvider = new GeneralizationItemProvider(this);
		}

		return generalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.RelationBinary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationBinaryItemProvider relationBinaryItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.RelationBinary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationBinaryAdapter() {
		if (relationBinaryItemProvider == null) {
			relationBinaryItemProvider = new RelationBinaryItemProvider(this);
		}

		return relationBinaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.AttributeWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeWcItemProvider attributeWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.AttributeWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeWcAdapter() {
		if (attributeWcItemProvider == null) {
			attributeWcItemProvider = new AttributeWcItemProvider(this);
		}

		return attributeWcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.MethodWc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodWcItemProvider methodWcItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.MethodWc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodWcAdapter() {
		if (methodWcItemProvider == null) {
			methodWcItemProvider = new MethodWcItemProvider(this);
		}

		return methodWcItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelFactoryAbstractaWcItemProvider != null) modelFactoryAbstractaWcItemProvider.dispose();
		if (projectWcItemProvider != null) projectWcItemProvider.dispose();
		if (packageWcItemProvider != null) packageWcItemProvider.dispose();
		if (dataTypeFactoryWcItemProvider != null) dataTypeFactoryWcItemProvider.dispose();
		if (typeWcItemProvider != null) typeWcItemProvider.dispose();
		if (classWcItemProvider != null) classWcItemProvider.dispose();
		if (compositionItemProvider != null) compositionItemProvider.dispose();
		if (generalizationItemProvider != null) generalizationItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (relationBinaryItemProvider != null) relationBinaryItemProvider.dispose();
		if (attributeWcItemProvider != null) attributeWcItemProvider.dispose();
		if (methodWcItemProvider != null) methodWcItemProvider.dispose();
	}

}
