var association = ECore!EClass.all.selectOne(c|c.name = "Association");
association.createLinkEndLabel("roleA", true,true);
association.createLinkEndLabel("multA", true, false);

association.createLinkEndLabel("roleB", false,false);
association.createLinkEndLabel("multB",false, true);


var containment = ECore!EClass.all.selectOne(c|c.name = "Composition");
containment.createLinkEndLabel("roleA", true,true);
containment.createLinkEndLabel("multA", true, false);

containment.createLinkEndLabel("roleB", false,false);
containment.createLinkEndLabel("multB",false, true);

var agregation = ECore!EClass.all.selectOne(c|c.name = "Aggregation");
agregation.createLinkEndLabel("roleA", true,true);
agregation.createLinkEndLabel("multA", true, false);

agregation.createLinkEndLabel("roleB", false,false);
agregation.createLinkEndLabel("multB",false, true);

var realtionBinary = ECore!EClass.all.selectOne(c|c.name = "RelationBinary");
realtionBinary.createLinkEndLabel("roleA", true,true);
realtionBinary.createLinkEndLabel("multA", true, false);

realtionBinary.createLinkEndLabel("roleB", false,false);
realtionBinary.createLinkEndLabel("multB",false, true);





operation ECore!EClass createLinkEndLabel(attribute:String, source:Boolean, up:Boolean){
	var endName;
	if (source) {
		endName = attribute;
	}
	else {
		endName = attribute;
	} 
	
	var labelName = self.name + endName + "Label";
	
	// Create the figure descriptor and the label
	var labelFigureDescriptor = 
		createFigureDescriptor(labelName + "Figure");
	var label = new GmfGraph!Label;
	label.name = labelName;
	label.text = endName;
	labelFigureDescriptor.actualFigure = label;
	
	// Create the diagram label
	var diagramLabel = new GmfGraph!DiagramLabel;
	diagramLabel.figure = labelFigureDescriptor;
	diagramLabel.name = labelName;
	diagramLabel.elementIcon = false;
	GmfGraph!Canvas.all.first().labels.add(diagramLabel);
	
	// Specify if the label will be placed at the beginning/end of the link
	var alignmentFacet = new GmfGraph!AlignmentFacet;
	if (source){
		alignmentFacet.alignment = GmfGraph!Alignment#END;
	}
	else {
		alignmentFacet.alignment = GmfGraph!Alignment#BEGINNING;
	}
	diagramLabel.facets.add(alignmentFacet);
	
	// Specify how far the label should be from the line
	var labelOffsetFacet = new GmfGraph!LabelOffsetFacet;
	if(source){
		if(up){
			labelOffsetFacet.x =  0;
			labelOffsetFacet.y =  12;
		}else{
			labelOffsetFacet.x =  -20;
			labelOffsetFacet.y = -12;
		}
	}else{
		if(up){
			labelOffsetFacet.x =  20;
			labelOffsetFacet.y = -12;
		}else{
			labelOffsetFacet.x =  3;
			labelOffsetFacet.y =  12;
		}
	}
	diagramLabel.facets.add(labelOffsetFacet);
	
	// Create the label/attribute mapping in the .gmfmap model
	var featureLabelMapping = new GmfMap!FeatureLabelMapping;
	featureLabelMapping.diagramLabel = diagramLabel;
	
	featureLabelMapping.features.add(self.eAllStructuralFeatures.
		selectOne(sf|sf.name = attribute));
		
	featureLabelMapping.readOnly = false;
	var linkMapping = GmfMap!LinkMapping.all.
		selectOne(lm|lm.domainMetaElement = self);
		
	linkMapping.labelMappings.add(featureLabelMapping);

}

operation createFigureDescriptor(name : String) {
	var figureDescriptor = new GmfGraph!FigureDescriptor;
	figureDescriptor.name = name;
	GmfGraph!FigureGallery.all.first().descriptors.add(figureDescriptor);
	return figureDescriptor;
}

